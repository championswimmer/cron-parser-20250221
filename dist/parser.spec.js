"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const parser_1 = require("./parser");
(0, globals_1.describe)('Parser', () => {
    (0, globals_1.test)('should parse correctly "1 1 1 1 1" ', () => {
        const parsedCron = (0, parser_1.parseCronString)('1 1 1 1 1');
        (0, globals_1.expect)(parsedCron.minute).toEqual([1]);
        (0, globals_1.expect)(parsedCron.hour).toEqual([1]);
        (0, globals_1.expect)(parsedCron.dayOfMonth).toEqual([1]);
        (0, globals_1.expect)(parsedCron.month).toEqual([1]);
        (0, globals_1.expect)(parsedCron.dayOfWeek).toEqual([1]);
    });
    (0, globals_1.test)('should parse correctly "1-5 1 1 1 1" ', () => {
        const parsedCron = (0, parser_1.parseCronString)('1 1 1 1 1');
        (0, globals_1.expect)(parsedCron.minute).toEqual([1, 2, 3, 4, 5]);
        (0, globals_1.expect)(parsedCron.hour).toEqual([1]);
        (0, globals_1.expect)(parsedCron.dayOfMonth).toEqual([1]);
        (0, globals_1.expect)(parsedCron.month).toEqual([1]);
        (0, globals_1.expect)(parsedCron.dayOfWeek).toEqual([1]);
    });
    (0, globals_1.test)('should error on invalid cron string "1 1 1 1"', () => {
        // expect "Invalid Cron String" error
        (0, globals_1.expect)(() => (0, parser_1.parseCronString)('1 1 1 1')).toThrowError('Invalid Cron String');
    });
});
(0, globals_1.describe)('parseMinute', () => {
    (0, globals_1.test)('should parse correctly "*" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('*');
        (0, globals_1.expect)(parsedMinute).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]);
    });
    (0, globals_1.test)('should parse correctly "1" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('1');
        (0, globals_1.expect)(parsedMinute).toEqual([1]);
    });
    (0, globals_1.test)('should parse correctly "1-5" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('1-5');
        (0, globals_1.expect)(parsedMinute).toEqual([1, 2, 3, 4, 5]);
    });
    // test 2 overlapping ranges 
    (0, globals_1.test)('should parse correctly "1-5,3-6" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('1-5,3-6');
        (0, globals_1.expect)(parsedMinute).toEqual([1, 2, 3, 4, 5, 6]);
    });
    // test with a step 
    (0, globals_1.test)('should parse correctly "1-5/2" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('1-5/2');
        (0, globals_1.expect)(parsedMinute).toEqual([1, 3, 5]);
    });
    // test two overlapping ranges with different steps 
    (0, globals_1.test)('should parse correctly "1-10/2,7-18/3" ', () => {
        const parsedMinute = (0, parser_1.parseMinute)('1-10/2,7-18/3');
        (0, globals_1.expect)(parsedMinute).toEqual([1, 3, 5, 7, 9, 10, 13, 16]);
    });
    // test for invalid values of minute 
    (0, globals_1.test)('should error on invalid values', () => {
        // error on passing non-numeric values
        (0, globals_1.expect)(() => (0, parser_1.parseMinute)('a')).toThrowError('Invalid Minute Value');
        (0, globals_1.expect)(() => (0, parser_1.parseMinute)('1-a')).toThrowError('Invalid Minute Value');
        (0, globals_1.expect)(() => (0, parser_1.parseMinute)('1-5/a')).toThrowError('Invalid Minute Value');
        // error on passing values outside the range 0-59
        (0, globals_1.expect)(() => (0, parser_1.parseMinute)('60')).toThrowError('Invalid Minute Value');
        (0, globals_1.expect)(() => (0, parser_1.parseMinute)('1-60')).toThrowError('Invalid Minute Value');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFyc2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBdUQ7QUFDdkQscUNBQXdEO0FBRXhELElBQUEsa0JBQVEsRUFBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLElBQUEsY0FBSSxFQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFlLEVBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsY0FBSSxFQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFlLEVBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVB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